{
  "name": "Autoxls",
  "tagline": "An automatic Excel file generator (From SQL data)",
  "body": "Autoxls\r\n=======\r\n\r\n`autoxls` es una herramienta de linea de comandos para automatizar las\r\ngeneración de archivos Excel 2003 a partir de resultados obtenidos de consultas\r\na bases de datos.\r\n\r\n# Contenidos\r\n\r\n* [Características principales](#markdown-header-caracteriticas-principales)\r\n* [Antes de empezar](#markdown-header-antes-de-empezar)\r\n* [Primeros pasos](#markdown-header-primeros-pasos)\r\n* [Ejecución](#markdown-header-ejecucion)\r\n\t* [Niveles de log](#markdown-header-niveles-de-log)\r\n\t* [Definiciones de keywords](#markdown-header-definiciones-de-keywords)\r\n* [Notas para Desarrollo](#markdown-header-notas-para-desarrollo)\r\n\r\nCaracterísticas principales\r\n===========================\r\n\r\n* Múltiples conexiones a bases de datos\r\n* Mútiples fuentes de datos\r\n* Múltiples consultas/querys/Stored procedures\r\n* Capacidad de procesar múltiples recordsets a partir de una única consulta\r\n* Generáción automatizada de uno o más archivos Excel por ejecución\r\n* Definición dinámica de nombres y textos a partir de \"keywords\" definidas en\r\n  la invocación o por un archivo externo de keywords, puede aplicar:\r\n\t* Nombre del archivo\r\n\t* Nombres de las solapas\r\n\t* Textos en la planilla\r\n\t* Parámetros de invocación de la consulta\r\n\t* Datos de la conexión: servidor, usuario, contraseña\r\n* Definir multiples solapas por archivo\r\n* Automatizar la generación de múltiples objetos\r\n\t* textos y filas completas\r\n\t* formulas\r\n\t* grillas de datos o tablas\r\n* Definir formatos de los objetos\r\n\t* anchos de columnas\r\n\t* colores\r\n\t* tipos de letra\r\n\t* Alineaciones\r\n\t* formatos númericos\r\n\r\n\r\nAntes de empezar\r\n================\r\n\r\nPara comenzar, antes de probar la ejecución de esta herramienta, es necesario\r\nescribir un archivo de definición de la exportación a realizar. Este no es más\r\nque un archivo en formato JSON, que describe datos, archivos, planillas y\r\nformatos de la exportación. Nota: para validar el formato del mismo: [JSON\r\nEditor Online](http://www.jsoneditoronline.org/). \r\n\r\nEste archivo definirá los siguientes elementos:\r\n\r\n* **datasources**: uno o más conexiones a bases de datos, con las siguientes propiedades:\r\n\r\n\t* **data\\_connect\\_str**: que establece una conexión a un servidor de\r\n\t  datos.\r\n\t* **data\\_query**: que define la correspondiente consulta. Podrá ser una\r\n\t  \"query\" común o directamente la ejecución de un stored procedure.\r\n\t* **data\\_query\\_file**: Archivo dónde encontramos la consulta SQL.\r\n\t\r\n* **files**:  Que define la generación de uno o más archivos Excel. Por cada archivo se podrá definir una o más:\r\n\t\r\n\t* **sheets**: Es decir, solapas de la planilla, por cada una de estas se pueden definir varios objetos Excel:\r\n\t\t\r\n\t\t* **text**: Texto estático, normalmente titulos, se define la celda, el\r\n\t\t  texto y el formato.\r\n\t\t* **text_rows**: Define una lista de textos estáticos, que se escriben\r\n\t\t  a partir de una posición en la fila, una celda a continuación de la\r\n\t\t  otra con un determinado formato\r\n\t\t* **text_formated**: Una especialización de los objetos de texto, que\r\n\t\t  permite aplicar formatos sobre datos recibidos en las __keywords__.\r\n\t\t* **datagrid**: Una grilla de datos, la salida final de los datos\r\n\t\t  recuperados.\r\n\t\t* **formulas**: Formulas de escel\r\n\t\t* **table**: Una tabla Excel. \r\n\r\n* **formats**: Cada objetos se \"dibuja\" con distintos formatos, estos se\r\n  definene a nivel general. Hay dos tipos, los básicos o \"primitivos\", por\r\n  ejemplo: `\"right\": { \"align\" : \"right\" }` y los compuestos que se definen\r\n  como la suma de atributos primitivos, por ejemplo: `\"encabezado\": [\r\n  \"default_font\", \"bold\", \"color\", { \"bottom\" : 1, \"bottom_color\" : \"#0000FF\",\r\n  \"text_wrap\": \"True\", \"valign\": \"top\" }]`, en este ejemplo \"default_font\",\r\n  \"bold\", \"color\" son formatos definidos previamente y  { \"bottom\" : 1,\r\n  \"bottom_color\" : \"#0000FF\", \"text_wrap\": \"True\", \"valign\": \"top\" } es un\r\n  primitivo definido en el momento.\r\n\r\n* **conditional**: Formatos condicionales\r\n\r\nNota: Para referencia de las definiciones, ver la documentación del módulo [XlsxWriter](http://xlsxwriter.readthedocs.io/)\r\n\r\nConstrucción de la cadena Dsn según datasource\r\n==============================================\r\n\r\n\t* SQL Server: \"DRIVER={SQL Server};SERVER=<<server>>;DATABASE=<<database>>;UID=<<usuario>>;PWD=<<password>>\" \r\n\r\n\r\nPrimeros pasos\r\n==============\r\n\r\nPara entender el funcionamiento de esta herramienta, vamos a imaginar el\r\nsiguiente escenario: Tenemos un conjunto de servidores SQL Server y deseamos de\r\nforma automatizada generar un informe a una determinada hora de los procesos\r\ncorriendo en los mismos. Para esto contamos con un clásico stored procedure\r\nllamado `sp_who2`, usando `autoxls` resulta muy fácil hacer esto. El primer\r\npaso es generar la definición del proceso de exportación de datos, esto lo\r\nharemos escribiendo un archivo JSON similar a este:\r\n\r\n```javascript\r\n{\r\n\t\"datasources\": {\r\n\t\t\"data\" : {\r\n\t\t\t\"data_connect_str\" : \"DRIVER={SQL Server};SERVER=<<server>>;DATABASE=master;UID=<<user>>;PWD=<<passw>>\",\r\n\t\t\t\"data_query\" : \"EXEC sp_who2\"\r\n\t\t}\r\n\t},\r\n\t\"files\": [\r\n\t\t{\r\n\t\t\t\"filename\": \"sp_who2 on <<server>>_<<Now>>.xlsx\",\r\n\t\t\t\"sheets\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"name\": \"sp_who2 on <<server>>\",\r\n\t\t\t\t\t\"default_row_height\" : 11.5 ,\r\n\t\t\t\t\t\"objects\": {\r\n\t\t\t\t\t\t\"text\": [\r\n\t\t\t\t\t\t\t{ \"text\" : \"Resultado del sp_who ejecutado el <<Now>> en <<server>>\", \"format\" : \"encabezado_titulo\", \"at\" : \"B2\" }\r\n\t\t\t\t\t\t],\r\n\t\t\t\t\t\t\"text_rows\": [\r\n\t\t\t\t\t\t\t{ \"text\" : [null,null,null,null,null], \"format\" : \"encabezado_titulo\", \"at\" : \"C2\" }\r\n\t\t\t\t\t\t],\r\n\t\t\t\t\t\t\"datagrid\": [\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\"source\" : {\"datasource\": \"data\",\"recordset_index\" : 1},\r\n\t\t\t\t\t\t\t\t\"at\" : \"B3\",\r\n\t\t\t\t\t\t\t\t\"header_format\": \"encabezado\",\r\n\t\t\t\t\t\t\t\t\"header_height\": 25,\r\n\t\t\t\t\t\t\t\t\"freeze_header\" : true,\r\n\t\t\t\t\t\t\t\t\"datacols\" : [\r\n\t\t\t\t\t\t\t\t\t\t\t\t[ 1, \"SPID\"\t\t\t\t\t\t, 8\t\t, \"int\"\t\t\t\t, null ],\r\n\t\t\t\t\t\t\t\t\t\t\t\t[ 2, \"Status\"\t\t\t\t\t, 20\t, \"default\"\t\t\t, null ],\r\n\t\t\t\t\t\t\t\t\t\t\t\t[ 3, \"Login\"\t\t\t\t\t, 16\t, \"default\"\t\t\t, null ],\r\n\t\t\t\t\t\t\t\t\t\t\t\t[ 4, \"HostName\"\t\t\t\t\t, 12\t, \"default\"\t\t\t, null ],\r\n\t\t\t\t\t\t\t\t\t\t\t\t[11, \"ProgramName\"\t\t\t\t, 60\t, \"default\"\t\t\t, null ],\r\n\t\t\t\t\t\t\t\t\t\t\t\t[ 8, \"CpuTime\"\t\t\t\t\t, 12\t, \"number\"\t\t\t, null ]\r\n\r\n\t\t\t\t\t\t\t\t],\r\n\t\t\t\t\t\t\t\t\"autofilter_column_range\" : [1,6],\r\n\t\t\t\t\t\t\t\t\"subtotals\" : [\r\n\t\t\t\t\t\t\t\t\t{\"at\" : \"END\", \"format\" : \"subtotal_int\", \"total_function\" : \"2\" , \"cols_num\" : [1] },\r\n\t\t\t\t\t\t\t\t\t{\"at\" : \"END\", \"format\" : \"subtotal\", \"total_function\" : \"9\" , \"cols_num\" : [6] }\r\n\t\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t]\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t]\t\r\n\t\t}\r\n\t],\r\n\t\"formats\": {\r\n\t\t\t\"default_font\"\t\t: { \"font_name\" : \"Verdana\", \"font_size\" : 8, \"num_format\" : \"\", \"valign\" : \"top\" },\r\n\t\t\t\"right\" \t\t\t: { \"align\" : \"right\" },\r\n\t\t\t\"left\" \t\t\t\t: { \"align\" : \"left\" },\r\n\t\t\t\"bold\" \t\t\t\t: { \"bold\" : \"True\" },\r\n\t\t\t\"color\"\t\t\t\t: { \"bg_color\": \"#C6EFCE\" },\r\n\t\t\t\"int_fmt\"\t\t\t: { \"num_format\" : \"#,##0\" },\r\n\t\t\t\"number2_fmt\"\t\t: { \"num_format\" : \"#,##0.00\" },\r\n\t\t\t\"default\" \t\t\t: [ \"default_font\", \"left\" ] ,\r\n\t\t\t\"encabezado_titulo\"\t: [ \"default_font\", \"bold\", \"color\"],\r\n\t\t\t\"encabezado\"\t\t: [ \"default_font\", \"bold\", \"color\", { \"bottom\" : 1, \"bottom_color\" : \"#0000FF\", \"text_wrap\": \"True\", \"valign\": \"top\" }],\r\n\t\t\t\"subtotal_int\" \t\t: [ \"default_font\", \"right\", \"bold\", \"int_fmt\" ],\r\n\t\t\t\"subtotal\" \t\t\t: [ \"default_font\", \"right\", \"bold\", \"number2_fmt\" ],\r\n\t\t\t\"number\" \t\t\t: [ \"default_font\", \"right\", \"number2_fmt\" ],\r\n\t\t\t\"int\" \t\t\t\t: [ \"default_font\", \"right\", \"int_fmt\" ]\r\n\t}\r\n}\r\n```\r\n\r\n\r\nEjecución\r\n=========\r\n\r\n```\r\n#!bash\r\n\r\nuso: autoxls [-h] [-v] [-o \"path\"] [-n <level>] [-l file] [-f \"archivo\"]\r\n             [-k '{key:value,key:value}'] [-s]\r\n             [\"archivo\"]\r\n\r\nGeneración automatizada de archivos Excel (v0.9)\r\n2014, 2015, 2016 Patricio Moracho <pmoracho@gmal.com>\r\n\r\nargumentos posicionales:\r\n  \"archivo\"                               Archivo de entrada (JSON)\r\n\r\nargumentos opcionales:\r\n  -h, --help                              mostrar esta ayuda y salir\r\n  -v, --version                           show program's version number and exit\r\n  -o \"path\", --outputpath \"path\"          Carpeta de salida dónde se almacenaran las planillas\r\n  -n <level>, --loglevel <level>          Nivel de log (default: ninguno)\r\n  -l file, --logfile file                 Archivo de log\r\n  -f \"archivo\", --keywordfile \"archivo\"   Archivo de keywords del procesos\r\n  -k '{key:value,key:value}', --keywords '{key:value,key:value}'\r\n                                          Keywords del procesos\r\n  -s, --start-excel                       Abrir automáticamente las planillas generadas\r\n\r\n\r\n```\r\n\r\nDefiniciones de keywords\r\n========================\r\n\r\n\r\nNiveles de log\r\n==============\r\n\r\nUtilizar el parámetro `-n` o `--loglevel` para indicar el nivel de información que mostrará la herramienta. Por defecto el nivel es NONE, que no mustra ninguna información.\r\n\r\nNível\t\t| Detalle\r\n----------- | -------------\r\nNONE\t\t| No motrar ninguna información\r\nDEBUG\t\t| Información detallada, tipicamente análisis y debug\r\nINFO\t\t| Confirmación visual de lo esperado\r\nWARNING\t\t| Información de los eventos no esperados, pero aún la herramienta puede continuar\r\nERROR\t\t| Errores, alguna funcionalidad no se puede completar\r\nCRITICAL \t| Errores serios, el programa no puede continuar\r\n\r\n\r\nNotas para Desarrollo\r\n=====================\r\n\r\nPara desarrollo de la herramienta es necesario, además de contar con el entorno\r\nde desarrollo python mencionado [aquí](../README.md), tener en cuenta la\r\nsiguiente información:\r\n\r\n* Crear el entorno de desarrollo\r\n\t* Crear el entorno virtual, de esta manera aislamos las librerías que\r\n\t  necesitaremos sin \"ensuciar\" el entorno Python base, por ejemplo:\r\n\t  `virtualenv ../venvs/autoxls\r\n\t* Activar el entorno, antes que nada hay que activar el entorno, para que\r\n\t  los paths a Python apunten a las nuevas carpetas (Usando bash):  `source\r\n\t  ../venvs/autoxls/Scripts/activate`, en Windows:\r\n\t  `../venvs/autoxls/Scripts/activate.bat`\r\n\t* Instalar librerías adicionales. \r\n\t\t* [XlsxWriter](https://github.com/jmcnamara/XlsxWriter): Estupenda\r\n\t\t  libreria para generar archivos Excel.\r\n\t\t* [pypyodbc](https://github.com/jiangwen365/pypyodbc) para la\r\n\t\t  conectividada con las bases de datos: `pip install pypyodbc`\r\n\t\t* [pyinstaller](https://github.com/pyinstaller/pyinstaller/) solo si el\r\n\t\t  objetivo final es construir un ejecutable binario, esta herramienta\r\n\t\t  es bastante sencilla y rápida si bien es mucho más poderosa\r\n\t\t  [Cx_freeze](https://bitbucket.org/anthony_tuininga/cx_freeze), para\r\n\t\t  instalar: `pip install pyinstaller`\r\n\r\n\r\n* Probar el autoxls\r\n\t* Activar el entorno:  `source  ../venvs/autoxls/Scripts/activate` o `../venvs/autoxls/Scripts/activate.bat`\r\n\t* Ejecuta el script principal: `python autoxls.py -h`\r\n\r\n\r\n* Preparar EXE para distribución\r\n\t* `pyinstaller autoxls.py -y --onefile --clean`\r\n\t* El archivo final debería estar en ./dist/autoxls.exe\r\n\r\n# Notas para el desarrollador:\r\n\r\n## Requisitos iniciales\r\n\r\nEl proyecto **autoxls** esta construido usando el lenguaje **python**, a la\r\nfecha no se usan librerías adicionales a las propias de python, pero de todas\r\nformas es recomendable preparar antes que nada, un entorno de desarrollo. A\r\ncontinuación expondremos en detalle cuales son los pasos para tener preparado\r\nel entorno de desarrollo. Este detalle esta orientado a la implementación sobre\r\nWindows 32 bits, los pasos para versiones de 64 bits son sustancialmente\r\ndistintos, en particular por algunos de los \"paquetes\" que se construyen a\r\npartir de módulos en C o C++, de igual forma la instalación sobre Linux tiene\r\nsus grandes diferencias. Eventualmente profundizaremos sobre estos entornos,\r\npero en principio volvemos a señalar que el siguiente detalle aplica a los\r\nambientes Windows de 32 bits:\r\n\r\n* Obviamente en primer lugar necesitaremos\r\n  [Python](https://www.python.org/ftp/python/3.4.0/python-3.4.0.msi), por ahora\r\n  únicamente la versión 3.4. La correcta instalación se debe verificar desde la\r\n  línea de comandos: `python --version`. Si todo se instaló correctamente se\r\n  debe ver algo como esto `Python 3.4.0`, sino verificar que Python.exe se\r\n  encuentre correctamente apuntado en el PATH.\r\n\r\n* Es conveniente pero no mandatorio hacer upgrade de la herramienta pip:\r\n  `python -m pip install --upgrade pip`\r\n\r\n* [Virutalenv](https://virtualenv.pypa.io/en/stable/). Es la herramienta\r\n  estándar para crear entornos \"aislados\" de python. Para no tener conflictos\r\n  de desarrollo lo que haremos mediante esta herramienta es crear un \"entorno\r\n  virtual\" de python en una carpeta del proyecto (venv). Este \"entorno virtual\"\r\n  contendrá una copia completa de Python, al activarlo se modifica el PATH al\r\n  python.exe que apuntará ahora a nuestra carpeta del entorno, evitando\r\n  cualquier tipo de conflicto con un entorno Python ya existente. La\r\n  instalación de virtualenv se hara mediante `pip install virtualenv`\r\n\r\n* Descargar el proyecto desde [Github](https://github.com/pmoracho/autoxls), se\r\n  puede descargar desde la página el proyecto como un archivo Zip, o si\r\n  contamos con [Git](https://git-for-windows.github.io/) sencillamente haremos\r\n  un `git clone https://github.com/pmoracho/parseit`.\r\n\r\n* El proyecto una vez descomprimido o luego del clonado del repositorio tendrá\r\n  una estructura de directorios similar a la siguiente:\r\n\r\n```\r\nautoxls.git\r\n   |-dist\r\n   |-tests\r\n   |-tools\r\n```\r\n\r\n## Preparación del entorno virtual local\r\n\r\nPara poder ejecutar, o crear la distribución de la herramientas, lo primero que\r\ndeberemos hacer es armar un entorno python \"virtual\" que alojaremos en una\r\nsubcarpeta del directorio principal que llamaremos \"venv\". En el proyecto\r\nincorporamos una herramienta de automatización de algunas tareas básicas. Se\r\ntrata de `make.py`, la forma de ejecutarlo es la siguiente: `python\r\ntools\\make.py <comando>` la ejecución si parámetros o mediante el parámetro\r\n`--help` arrojará una salida como lo que sigue:\r\n\r\n```\r\nAutomatización de tareas para el proyecto Autoxls\r\n(c) 2016, Patricio Moracho <pmoracho@gmail.com>\r\n\r\nUso: make <command> [<args>]\r\n\r\nLos comandos más usados:\r\n   devcheck   Hace una verificación del entorno de desarrollo\r\n   devinstall Realiza la instalación del entorno de desarrollo virtual e instala los requerimientos\r\n   docinstall Intalación de Sphinx\r\n   clear      Elimina archivos innecesarios\r\n   test       Ejecuta todos los tests definidos del proyecto\r\n   build      Construye la distribución binaria de las herramientas del proyecto\r\n\r\nargumentos posicionales:\r\n  command     Comando a ejecutar\r\n\r\nargumentos opcionales:\r\n  -h, --help  mostrar esta ayuda y salir\r\n```\r\n\r\nPara preparar el entorno virtual simplemente haremos `python tools\\make.py\r\ndevinstall`, este proceso si resulta exitoso deberá haber realizado las\r\nsiguientes tareas:\r\n\r\n* Creación de un entorno pyhton virtual en la carpeta \"venv\", invocable\r\n  mediante `venv\\Scripts\\activate.bat` en Windows o `source\r\n  venv/Scripts/activate` en entornos Linux o Cygwin/Mingw (en Windows)\r\n* Instalado todas las dependencias necesarias\r\n\r\n\r\n## Notas adicionales:\r\n\r\n* Es recomendable y cómodo, pero entiendo que no es mandatorio, contar con un\r\n  entorno estilo \"Linux\", por ejemplo [MinGW](http://www.mingw.org/), tal como\r\n  dice la página del proyecto: \"MinGW provides a complete Open Source\r\n  programming tool set which is suitable for the development of native\r\n  MS-Windows applications, and which do not depend on any 3rd-party C-Runtime\r\n  DLLs. (It does depend on a number of DLLs provided by Microsoft themselves,\r\n  as components of the operating system; most notable among these is\r\n  MSVCRT.DLL, the Microsoft C runtime library. Additionally, threaded\r\n  applications must ship with a freely distributable thread support DLL,\r\n  provided as part of MinGW itself).\" De este entorno requerimos algunas\r\n  herramientas de desarrollo: Bash para la línea de comandos y Make para la\r\n  automatización de varias tareas del proyecto. \r\n\r\n* Usar \"soft tabs\": Con cualquier editor que usemos configurar el uso del <tab>\r\n  en vez de los espacios, yo prefiero el <tab> puro al espacio, entiendo que es\r\n  válido el otro criterio pero ya los fuentes están con esta configuración, por\r\n  lo que para evitar problemas al compilar los .py recomiendo seguir usando\r\n  este criterio. Asimismo configurar en 4 posiciones estos <tab>.\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}